AWSTemplateFormatVersion: '2010-09-09'
Description: Template for Photo Gallery

Resources:
  ApiGatewayDeployment:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::Deployment"
    DeletionPolicy: "Retain"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"
  S3BucketPolicyCcphotoalbum:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::BucketPolicy"
    DeletionPolicy: "Retain"
    Properties:
      Bucket:
        Ref: "S3BucketCcphotoalbum"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:s3:::ccphotoalbum/*"
          Action: "s3:GetObject"
          Effect: "Allow"
          Principal: "*"
          Sid: "Stmt1712445730478"
        Id: "Policy1712445739327"
  IAMRoleIndexPhotoV2Role:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyIndexServiceRoleAWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonS3FullAccess"
      - "arn:aws:iam::aws:policy/AmazonRekognitionFullAccess"
      MaxSessionDuration: 3600
      RoleName: "index-photo-v2-role-q0bd47pi"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  ApiGatewayUsagePlan:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::UsagePlan"
    DeletionPolicy: "Retain"
    Properties:
      ApiStages:
      - Stage:
          Fn::GetAtt:
          - "ApiGatewayStageDev"
          - "StageName"
        ApiId:
          Ref: "ApiGatewayRestApi"
        Throttle: {}
      Quota:
        Period: "MONTH"
        Limit: 10000
        Offset: 0
      Throttle:
        BurstLimit: 50
        RateLimit: 100
      UsagePlanName: "imageGalleryUsagePlan"
  LambdaPermissionFunctionSearchPhotoV2:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionSearchPhotoV2"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn: "arn:aws:execute-api:us-east-1:550673492243:c18n9k15l8/*/GET/search"
      Principal: "apigateway.amazonaws.com"
  IAMManagedPolicyServiceRoleAWSLambdaBasicExecutionRole:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "AWSLambdaBasicExecutionRole-43f9bf1e-4709-448b-99cc-9fb6b79d08b9"
      Path: "/service-role/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:logs:us-east-1:550673492243:*"
          Action: "logs:CreateLogGroup"
          Effect: "Allow"
        - Resource:
          - "arn:aws:logs:us-east-1:550673492243:log-group:/aws/lambda/search-photo-v2:*"
          Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Effect: "Allow"
      Roles:
      - "search-photo-v2-role-9v8ihtws"
      Users: []
  ApiGatewayStageDev:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::Stage"
    DeletionPolicy: "Retain"
    Properties:
      RestApiId:
        Ref: "ApiGatewayRestApi"
      DeploymentId:
        Fn::GetAtt:
        - "ApiGatewayDeployment"
        - "DeploymentId"
      StageName: "dev"
      CacheClusterSize: "0.5"
      TracingEnabled: false
      CacheClusterEnabled: false
  ApiGatewayApiKey:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::ApiKey"
    DeletionPolicy: "Retain"
    Properties:
      StageKeys: []
      Value: "beuV2SuzVr6ZqoI6VP0cA4ImJSVEXlEk6vlOtTcx"
      Enabled: true
      Name: "imageGalleryApiKey"
  LambdaPermissionFunctionIndexPhotoV2:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Permission"
    DeletionPolicy: "Retain"
    Properties:
      FunctionName:
        Fn::GetAtt:
        - "LambdaFunctionIndexPhotoV2"
        - "Arn"
      Action: "lambda:InvokeFunction"
      SourceArn:
        Fn::GetAtt:
        - "S3BucketCcphotoalbum"
        - "Arn"
      Principal: "s3.amazonaws.com"
      SourceAccount: "550673492243"
  S3BucketCcphotoalbum:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      NotificationConfiguration:
        QueueConfigurations: []
        TopicConfigurations: []
        LambdaConfigurations:
        - Function:
            Fn::GetAtt:
            - "LambdaFunctionIndexPhotoV2"
            - "Arn"
          Event: "s3:ObjectCreated:*"
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        BlockPublicAcls: false
      BucketName: "ccphotoalbum"
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  LambdaFunctionSearchPhotoV2:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Retain"
    Properties:
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 10
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "lambda_function.lambda_handler"
      Code:
        ZipFile: |
          import json
          import boto3
          import requests
          from requests.auth import HTTPBasicAuth

          def lambda_handler(event, context):
              lex = boto3.client('lex-runtime')
              query_text = event['queryStringParameters']['keyword']
              lex_response = lex.post_text(
                  botName='PhotoAlbumBot',
                  botAlias='dev',
                  userId='test',
                  inputText= query_text
              )
              
              keywordA = lex_response['slots']['keywordA']
              keywordB = lex_response['slots']['keywordB']
              print(keywordA)
              print(keywordB)
              if (keywordA is None):
                  return {'statusCode': 404, 'body': 'Keyword not found'}
              
              es_query = {
                "query": {
                  "match": {
                    "labels": keywordA,
                  }
                }
              }
              if (keywordB is not None):    
                es_query = {
                  "query": {
                    "match": {
                      "labels": {
                        "query": keywordA + " " + keywordB,
                        "operator": "and"
                      }
                    }
                  }
                }
              
              headers: dict = {"Content-Type": "application/json"}
              url: str = "https://search-ccphotoalbum-okobqcqxaiuu5do2ujtwm3o6iu.aos.us-east-1.on.aws" + "/" + "photos" + "/" + "_search"

              auth = HTTPBasicAuth("ccphotoalbum","Ccphotoalbum@2024")
              response = requests.get(url, headers=headers, json=es_query, auth=auth)
              response.raise_for_status()
              print(response.json())
              
              response = response.json()
              result_count = response['hits']['total']['value']
              if (result_count < 1):
                return {
                  'statusCode': 404,
                  'body': 'No images found'
              }
              image_set = set()
              for doc in response['hits']['hits']:
                image_set.add('https://ccphotoalbum.s3.amazonaws.com/'+ doc['_source']['object_key'])
                
              print(image_set)
              print('test')
              
              return {
                  'statusCode': 200,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps(list(image_set))
              }

      Role:
        Fn::GetAtt:
        - "IAMRoleSearchPhotoV2Role"
        - "Arn"
      FileSystemConfigs: []
      FunctionName: "search-photo-v2"
      Runtime: "python3.12"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/search-photo-v2"
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
  S3BucketPolicyCcphotoalbumfrontend:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::BucketPolicy"
    DeletionPolicy: "Retain"
    Properties:
      Bucket:
        Ref: "S3BucketCcphotoalbumfrontend"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:s3:::ccphotoalbumfrontend/*"
          Action: "s3:GetObject"
          Effect: "Allow"
          Principal: "*"
          Sid: "PublicReadGetObject"
  IAMRoleSearchPhotoV2Role:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::Role"
    DeletionPolicy: "Retain"
    Properties:
      Path: "/service-role/"
      ManagedPolicyArns:
      - Ref: "IAMManagedPolicyServiceRoleAWSLambdaBasicExecutionRole"
      - "arn:aws:iam::aws:policy/AmazonLexFullAccess"
      MaxSessionDuration: 3600
      RoleName: "search-photo-v2-role-9v8ihtws"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Action: "sts:AssumeRole"
          Effect: "Allow"
          Principal:
            Service: "lambda.amazonaws.com"
  ApiGatewayUsagePlanKey:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::UsagePlanKey"
    DeletionPolicy: "Retain"
    Properties:
      KeyType: "API_KEY"
      UsagePlanId:
        Ref: "ApiGatewayUsagePlan"
      KeyId:
        Ref: "ApiGatewayApiKey"
  ApiGatewayRestApi:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::ApiGateway::RestApi"
    DeletionPolicy: "Retain"
    Properties:
      Body:
        swagger: 2.0
        info:
          description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
          version: 1.0.0
          title: "AI Photo Search"
        host: "c18n9k15l8.execute-api.us-east-1.amazonaws.com"
        basePath: "/dev"
        schemes:
          - "https"
        paths:
          /search:
            get:
              operationId: "searchPhotos"
              produces:
                - "application/json"
              parameters:
                - name: "keyword"
                  in: "query"
                  required: true
                  type: "string"
                - name: "x-api-key"
                  in: "header"
                  required: true
                  type: "string"
              responses:
                '200':
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/SearchResponse"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                '403':
                  description: "403 response"
                  schema:
                    $ref: "#/definitions/Error"
                '500':
                  description: "500 response"
                  schema:
                    $ref: "#/definitions/Error"
            options:
              consumes:
                - "application/json"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
          '/upload/{bucket}/{key}':
            put:
              produces:
                - "application/json"
              parameters:
                - name: "x-amz-meta-customLabels"
                  in: "header"
                  required: false
                  type: "string"
                - name: "key"
                  in: "path"
                  required: true
                  type: "string"
                - name: "x-api-key"
                  in: "header"
                  required: true
                  type: "string"
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
            options:
              consumes:
                - "application/json"
              parameters:
                - name: "bucket"
                  in: "path"
                  required: true
                  type: "string"
                - name: "key"
                  in: "path"
                  required: true
                  type: "string"
              responses:
                '200':
                  description: "200 response"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
        definitions:
          Error:
            type: "object"
            properties:
              code:
                type: "integer"
                format: "int32"
              message:
                type: "string"
          Photo:
            type: "object"
            properties:
              url:
                type: "string"
              labels:
                type: "array"
                items:
                  type: "string"
          SearchResponse:
            type: "object"
            properties:
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Photo"
      ApiKeySourceType: "HEADER"
      Description: "AI Photo Search application, built during the Cloud and Big Data"
      EndpointConfiguration:
        Types:
        - "REGIONAL"
      DisableExecuteApiEndpoint: false
      BinaryMediaTypes:
      - "image/jpg"
      - "image/jpeg"
      - "image/png"
      Name: "AI Photo Search"
  IAMManagedPolicyIndexServiceRoleAWSLambdaBasicExecutionRole:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::IAM::ManagedPolicy"
    DeletionPolicy: "Retain"
    Properties:
      ManagedPolicyName: "AWSLambdaBasicExecutionRole-ab2ab0ae-ee5f-48c2-b010-58d0f6a88bad"
      Path: "/service-role/"
      Description: ""
      Groups: []
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Resource: "arn:aws:logs:us-east-1:550673492243:*"
          Action: "logs:CreateLogGroup"
          Effect: "Allow"
        - Resource:
          - "arn:aws:logs:us-east-1:550673492243:log-group:/aws/lambda/index-photo-v2:*"
          Action:
          - "logs:CreateLogStream"
          - "logs:PutLogEvents"
          Effect: "Allow"
      Roles:
      - "index-photo-v2-role-q0bd47pi"
      Users: []
  S3BucketCcphotoalbumfrontend:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Retain"
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: "index.html"
      PublicAccessBlockConfiguration:
        RestrictPublicBuckets: false
        IgnorePublicAcls: false
        BlockPublicPolicy: false
        BlockPublicAcls: false
      BucketName: "ccphotoalbumfrontend"
      OwnershipControls:
        Rules:
        - ObjectOwnership: "BucketOwnerEnforced"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - BucketKeyEnabled: true
          ServerSideEncryptionByDefault:
            SSEAlgorithm: "AES256"
  LambdaFunctionIndexPhotoV2:
    UpdateReplacePolicy: "Retain"
    Type: "AWS::Lambda::Function"
    DeletionPolicy: "Retain"
    Properties:
      MemorySize: 128
      Description: ""
      TracingConfig:
        Mode: "PassThrough"
      Timeout: 10
      RuntimeManagementConfig:
        UpdateRuntimeOn: "Auto"
      Handler: "LF1/lambda_function.lambda_handler"
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          import requests
          from requests.auth import HTTPBasicAuth

          def get_labels(bucket, key):
              rekognition = boto3.client("rekognition", region_name="us-east-1")
              response = rekognition.detect_labels(
                  Image={
                      "S3Object":
                      {"Bucket": bucket,
                      "Name": key}
                  },
                  MinConfidence=90, MaxLabels=20)
              
              labels = [x['Name'] for x in response["Labels"]]
              metadata = get_metadata(bucket, key)
              if bool(metadata) and len(metadata) > 0:
                  metadata = metadata['customlabels'].split(',')
                  labels = labels + metadata

              json_data = {
                  "object_key": key,
                  "bucket": bucket,
                  "createdTimestamp": datetime.now().isoformat(),
                  "labels": labels
              }
              return json_data
              

          def get_metadata(bucket, key):
              s3 = boto3.client("s3", region_name="us-east-1")
              response = s3.head_object(Bucket=bucket, Key=key)
              return response["Metadata"]
              

          def lambda_handler(event, context):
              bucket = event["Records"][0]["s3"]["bucket"]["name"]
              key = event["Records"][0]["s3"]["object"]["key"]
              labels_json = get_labels(bucket, key)
              
              auth = HTTPBasicAuth(
                  "ccphotoalbum", "Ccphotoalbum@2024")
              headers: dict = {"Content-Type": "application/json"}
              url = "https://search-ccphotoalbum-okobqcqxaiuu5do2ujtwm3o6iu.aos.us-east-1.on.aws" + '/photos/' + 'photo/'+ datetime.now().isoformat() + labels_json['object_key']
              response = requests.post(url, json=labels_json, headers=headers, auth=auth)
              print('test1')
              
              return {
                  "statusCode": 200,
                  "body": json.dumps(response.json())
              }
      Role:
        Fn::GetAtt:
        - "IAMRoleIndexPhotoV2Role"
        - "Arn"
      FileSystemConfigs: []
      FunctionName: "index-photo-v2"
      Runtime: "python3.12"
      LoggingConfig:
        LogFormat: "Text"
        LogGroup: "/aws/lambda/index-photo-v2"
      EphemeralStorage:
        Size: 512
      Architectures:
      - "x86_64"
Outputs:
  WebsiteURL:
    Value: !GetAtt S3BucketCcphotoalbumfrontend.WebsiteURL